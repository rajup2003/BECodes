import time 
# Define the start_time variable here
start_time = time.time()
def fibonacci_non_recursive(n):
    series = [0, 1]
    for i in range(2, n):
        next_number = series[i - 1] + series[i - 2]
        series.append(next_number)
    end_time = time.time()
    return series
# Example usage
n = int(input("Enter the number of Fibonacci numbers you want to generate: "))
fibonacci_series_non_recursive = fibonacci_non_recursive(n)
print("Fibonacci series (non-recursive):", fibonacci_series_non_recursive)
end_time = time.time()
print("Time elapsed", end_time - start_time)

def fibonacci_recursive(n):
  start_time = time.time()
  if n <= 0:
      return []
  elif n == 1:
      return [0]
  elif n == 2:
      return [0, 1]
  else:
      series = fibonacci_recursive(n - 1)
      series.append(series[-1] + series[-2])
      return series
# Example usage
n = int(input("Enter the number of Fibonacci numbers you want to generate: "))
fibonacci_series_recursive = fibonacci_recursive(n)
print("Fibonacci series (recursive):", fibonacci_series_recursive)
end_time = time.time()
print("Time elapsed", end_time - start_time)


#Non-Recursive Approach:

#Time Complexity: O(n)
#Space Complexity: O(n) (linear space for storing the series)


#Recursive Approach:

#Time Complexity: O(2^n) (exponential time complexity due to repeated subproblem calculations)
#Space Complexity: O(n) (linear space for storing the series, but the function call stack grows exponentially with the input)
