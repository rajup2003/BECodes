# -*- coding: utf-8 -*-
"""Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1peOsIXzpsfpRkSqZyAe_umyplQFW_D6e
"""

import pandas as pd
import numpy as np
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Datasets/sales_data_sample.csv', encoding='unicode_escape')

df

df.isnull().sum()

df.shape

df=df.select_dtypes(include=["int64"])
df

sse=[]
k_values=range(1,10)

from sklearn.cluster import KMeans
for k in k_values:
    kmean=KMeans(n_clusters=k,n_init=10)
    kmean.fit(df)
    sse.append(kmean.inertia_)

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.plot(k_values, sse, marker="o")
plt.xlabel("Number of cluster")
plt.ylabel("SSE(Sum Of Square error)")
plt.grid()
plt.show()




////////////////////////////////////////////////////////////////////////////////////////////////////////

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.metrics import silhouette_score
from scipy.spatial.distance import cdist

# Load the dataset
sales_data = pd.read_csv('/content/drive/MyDrive/Datasets/sales_data_sample.csv', encoding='unicode_escape')

# Extract numerical columns for clustering
numeric_cols = ['ORDERNUMBER', 'QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER', 'SALES']

# Use only numeric columns for clustering
data = sales_data[numeric_cols]

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)

# Elbow Method to determine the number of clusters for K-Means
distortions = []
K = range(1, 11)
for k in K:
    kmeanModel = KMeans(n_clusters=k)
    kmeanModel.fit(scaled_data)
    distortions.append(sum(np.min(cdist(scaled_data, kmeanModel.cluster_centers_, 'euclidean'), axis=1)) / scaled_data.shape[0])

# Plot the Elbow graph
plt.figure(figsize=(8, 6))
plt.plot(K, distortions, 'bx-')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion')
plt.title('The Elbow Method showing the optimal number of clusters')
plt.show()

# Determine optimal number of clusters using the elbow point
optimal_k = 3  # Adjust this based on the Elbow graph observation

# Perform K-Means clustering with the optimal number of clusters
kmeans = KMeans(n_clusters=optimal_k)
kmeans_labels = kmeans.fit_predict(scaled_data)

# Perform Hierarchical clustering
linkage_matrix = linkage(scaled_data, method='ward')
plt.figure(figsize=(12, 8))
dendrogram(linkage_matrix)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Sample Index')
plt.ylabel('Distance')
plt.show()
