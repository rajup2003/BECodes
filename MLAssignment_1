"""Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vTNF9fUcBYnq3Cgvez1ZQedCH6Y64e9n
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path ='/content/drive/MyDrive/Datasets/uber.csv'
df = pd.read_csv(path)
df

df.isnull().sum()

df = df.dropna()

df.isnull().sum()

import seaborn as sns
import numpy as np

sns.boxplot(x=df['fare_amount'], width = 0.1)

Q1 = np.percentile(df['fare_amount'], 25, method='midpoint')
Q3 = np.percentile(df['fare_amount'], 75, method='midpoint')
IQR = Q3 - Q1
print(IQR)
upper=Q3+1.5*IQR
upper_array=np.array(df['fare_amount']>=upper)
print("Upper Bound:",upper)
print(upper_array.sum())

#Below Lower bound
lower=Q1-1.5*IQR
lower_array=np.array(df['fare_amount']<=lower)
print("Lower Bound:",lower)
print(lower_array.sum())

sns.boxplot(x=df['fare_amount'], width = 0.1)

len(lower_array)

len(upper_array)

df = df[df['fare_amount'] < upper]

df

sns.boxplot(x=df['fare_amount'], width = 0.1)

df = df[lower < df['fare_amount'] ]

df

sns.boxplot(x=df['fare_amount'], width = 0.1)

Q1 = np.percentile(df['fare_amount'], 25, method='midpoint')
Q3 = np.percentile(df['fare_amount'], 75, method='midpoint')
IQR = Q3 - Q1
print(IQR)
upper=Q3+1.5*IQR
upper_array=np.array(df['fare_amount']>=upper)
print("Upper Bound:",upper)
print(upper_array.sum())

#Below Lower bound
lower=Q1-1.5*IQR
lower_array=np.array(df['fare_amount']<=lower)
print("Lower Bound:",lower)
print(lower_array.sum())

df.corr(numeric_only=True)

X =df.iloc[:, 4:8]

X

Y = df.iloc[:, 2]

Y

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)
X_train

Y_train

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(X_train,Y_train)
prediction=lr.predict(X_test)

from sklearn.metrics import mean_squared_error
rmse_lr=np.sqrt(mean_squared_error(prediction,Y_test))
print(rmse_lr)
from sklearn.metrics import r2_score
r2_score = r2_score(Y_test, prediction)
print(r2_score)
input_values = [[-74, 40, -72, 41]]
predict_value = lr.predict(input_values)
print(predict_value)

input_values = [[-74, 40, -72, 41]]
predict_value = lr.predict(input_values)
print(predict_value)

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor(n_estimators = 5, random_state = 101) #n_estimators is no of decision tree
rf.fit(X_train,Y_train)
prediction_rf=rf.predict(X_test)

prediction_rf

from sklearn.metrics import mean_squared_error
rmse_rf=np.sqrt(mean_squared_error(prediction_rf,Y_test))
print(rmse_rf)
from sklearn.metrics import r2_score
r2_score = r2_score(Y_test, prediction_rf)
print(r2_score)

import warnings
warnings.filterwarnings("ignore")
input_data_point = [[-74, 40, -72, 41]]
predicted_value = rf.predict(input_data_point)
print(predicted_value)
